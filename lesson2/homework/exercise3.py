""""3. Реализовать программу работы с органическими клетками.
Необходимо создать класс Клетка. В его конструкторе инициализировать
параметр, соответствующий количеству клеток (целое число). В классе
должны быть реализованы методы перегрузки арифметических операторов:
сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
деление (__truediv__()).Данные методы должны применяться только к клеткам
и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное)
деление клеток, соответственно. В методе деления должно осуществляться
округление значения до целого числа.

Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно
равняться сумме ячеек исходных двух клеток.
Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность
количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется
как произведение количества ячеек этих двух клеток.
Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как
целочисленное деление количества ячеек этих двух клеток.

В классе необходимо реализовать метод make_order(), принимающий экземпляр класса
и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек
между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает,
то в последний ряд записываются все оставшиеся.

Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
Тогда метод make_order() вернет строку: *****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
Тогда метод make_order() вернет строку: *****\n*****\n*****.
"""


class Cell:
    """"Работа с клетками
    """
    def __init__(self, quantity: int):
        """Принемает количество ячаек в клетке(целое плоложительное число)

        :param quantity: int
        """
        self.quantity = quantity

    def __add__(self, other: int):
        """Создаёт новую клетку с количеством ячеек равной сумме двух клеток

        :param other: int
        :return: Cell
        """
        return Cell(self.quantity + other.quantity)

    def __sub__(self, other: int):
        """ Создаёт новую клетку с количеством ячеек равной разности двух клеток.
        Разность должна быть больше нуля.
        :param other: int
        :return:
        """
        if self.quantity > other.quantity:
            return Cell(self.quantity - other.quantity)
        else:
            raise ValueError("Отрицательное кольчесво ячеек в новой клетке")

    def __mul__(self, other:int):
        """ Создаёт новую клетку с количеством ячеек равной произведению двух клеток.

        :param other: int
        :return:
        """
        return Cell(self.quantity * other.quantity)

    def __truediv__(self, other: int):
        """ Создаёт новую клетку с количеством ячеек равной частному двух клеток.
        Для количества ячеек новой клетке применяется округление до целого числа.
        :param other: int
        :return:
        """
        if (self.quantity/other.quantity) - int(self.quantity/other.quantity) >= 0.5:
            return Cell(self.quantity // other.quantity + 1)
        else:
            return Cell(self.quantity // other.quantity)

    def make_order(self, row: int) ->str:
        """ Принемает количество ячеек в ряду
        Выводит графической отображение ячеек в клетке
        :param row: int
        :return: str
        """
        return self.quantity // row * f"{row * '*'}\n" + self.quantity % row * '*'

# Проверка
a = Cell(10)
b = Cell(4)
print((a+b).make_order(6))
print()
print((a-b).make_order(6))
print()
print((a*b).make_order(6))
print()
print((a/b).make_order(6))



